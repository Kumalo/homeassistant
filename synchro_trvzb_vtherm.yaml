blueprint:
  name: Manage more easily the use of SONOFF TRVZB with Versatile thermostat
  description: 
    "This blueprint alows to manage more easily the use of SONOFF TRVZB with Versatile thermostat.\n\n
       - What is needed : \n\t
         - An integrated  SONOFF TRVZB within Zigbee2Mqtt.\n\t
         - A VTherm of type over_valve with the SONOFF TRVZB entitiy as underlying climate.\n\n
       - What is done :\n\t
         - Mandatory : Synchronize the setpoint temperatures between the Versatile thermostat (Param 1) and SONOFF TRVZB (Param 2) climate entities.\n\n\t
         - Option 1 : Update the TRVZB.valve_closing_degree if filled (Param 4) when the TRVZB.valve_opening_degree (Param 3) is changed to maintain consistency.\n\n\t
         - Option 2 : if calibration entity (Param 5) is defined, force the TRVZB.local_temperature_calibration to the minimal value possible :\n\t\t
           - The TRVZB.valve_opening_degree is only effective if TRVZB.occupied_heating_setpoint > TRVZB.local_temperature.\n\t\t
           - If the TRVZB.local_temperature_calibration is valued at '-7' (default minimal value), the TRVZB.occupied_heating_setpoint should always be
             greater than TRVZB.local_temperature reduced with TRVZB.local_temperature_calibration.\n\t\t
           - In this case, the local_temperature of TRVZB is no longer meaningful: an external temperature sensor in the room is mandatory.\n\n
     The two options can be used alone or simultaneously but at least one must be active to have a functional result.\n"
  domain: automation
  input:
    vtherm_entity_target:
      name: "Param 1 : Versatile thermostat climate entity"
      description: The VTHERM to synchronize with the SONOFF TRVZB.
      selector:
        entity:
          filter:
            - domain: climate
          multiple: false
    trvzb_entity_target:
      name: "Param 2 : SONOFF TRVZB climate entity"
      description: The SONOFF TRVZB to synchronize with the VTHERM.
      selector:
        entity:
          filter:
            - domain: climate
    trvzb_opening_degree_entity_target:
      name: "Param 3 : Opening degree TRVZB entity"
      description: The TRVZB.valve_opening_degree entity used to calculate Closing degree.
      selector:
        entity:
          filter:
            - domain: number
          multiple: false
    trvzb_closing_degree_entity_target:
      name: "Param 4 : Closing degree TRVZB entity"
      description: 
        "The TRVZB.valve_closing_degree entity to update when TRVZB.valve_opening_degree is modified.\n
         If the entity is set, closing degree = 100 - Opening degree"
      default:
      selector:
        entity:
          filter:
            - domain: number
          multiple: false
    trvzb_calibration_temperature_entity_target:
      name: "Param 5 : Local Temperature Calibration TRVZB entity"
      description:
        "The TRVZB.local_temperature_calibration entity.\n
         If the entity is set, the minimal value is forced to keep TRVZB.occupied_heating_setpoint > TRVZB.local_temperature"
      default:
      selector:
        entity:
          filter:
            - domain: number
          multiple: false
    debounce_delay:
      name: Debounce delay
      description: Time to wait after an update before triggering
         the next one and prevents unwanted triggers and loop
      selector:
        duration: {}
      default:
        hours: 0
        minutes: 0
        seconds: 5
variables:
  vtherm_entity_target: !input vtherm_entity_target
  trvzb_entity_target: !input trvzb_entity_target
  trvzb_opening_degree_entity_target: !input trvzb_opening_degree_entity_target
  trvzb_closing_degree_entity_target: !input trvzb_closing_degree_entity_target
  trvzb_calibration_temperature_entity_target: !input trvzb_calibration_temperature_entity_target
triggers:
  - trigger: state
    id: change_trv
    entity_id: !input trvzb_entity_target
    attribute: temperature
  - trigger: state
    id: change_vtherm
    entity_id: !input vtherm_entity_target
    attribute: temperature
  - trigger: state
    id: change_open_degree
    entity_id: !input trvzb_opening_degree_entity_target
conditions: []
actions:
  - delay: !input debounce_delay
  - choose:
      - conditions:
          - condition: trigger
            id: change_trv
        sequence:
          - variables:
              t_updated: "{{ state_attr(trvzb_entity_target,'temperature') }}"
          - action: climate.set_temperature
            target:
              entity_id: "{{ vtherm_entity_target }}"
            data:
              temperature: "{{ t_updated }}"
      - conditions:
          - condition: trigger
            id: change_vtherm
        sequence:
          - variables:
              t_updated: "{{ state_attr(vtherm_entity_target,'temperature') }}"
          - action: climate.set_temperature
            target:
              entity_id: "{{ trvzb_entity_target }}"
            data:
              temperature: "{{ t_updated }}"
  - delay: !input debounce_delay
  - sequence:
      - if:
        - condition: template
          value_template: "{{ trvzb_closing_degree_entity_target is not none }}"
        then:
          - variables:
              closed_degree: "{{ 100 - states(trvzb_opening_degree_entity_target) | float(100) }}"
          - action: number.set_value
            target:
              entity_id: "{{ trvzb_closing_degree_entity_target }}"
            data:
              value: "{{ closed_degree }}"
  - sequence:
      - if:
          - condition: template
            value_template: "{{ trvzb_calibration_temperature_entity_target is not none }}"
          - condition: template
            value_template: >-
              {{ 
              states(trvzb_calibration_temperature_entity_target) | float(0)
              >
              state_attr(trvzb_calibration_temperature_entity_target,'min') | float(-7)
              }}
        then:
          - variables:
              offset: "{{ state_attr(trvzb_calibration_temperature_entity_target,'min') | float(-7) }}"
          - action: number.set_value
            metadata: {}
            data:
              value: "{{ offset }}"
            target:
              entity_id:  "{{ trvzb_calibration_temperature_entity_target }}"
mode: single
